---
title: "Movimento Browniano em um Computador Quântico"
subtitle: "Intuição para estatísticos"
author: "José Vítor Barreto Porfírio 190089971"
date: "07 april 2025"
date-format: "DD MMMM YYYY" 
lang: pt
execute:
  echo: false
format: 
  revealjs:
    theme: dark
    footer: '[GitHub](https://github.com/Voz-bonita/QuantumStochasticProcess)'
    self-contained: true
logo: images/UnB_Logo.png
css: styles.css
bibliography: references.bib
nocite: |
  @freeCodeCamp, @Bernoulli, @Milz_2021, @Sisson2022, @GBM
---

## {transition="fade"}

\newcommand{\ket}[1]{|#1\rangle}
\newcommand{\bra}[1]{\langle#1|}
\newcommand{\braket}[2]{\langle#1|#2\rangle}

<center>
<h3>Computação Clássica</h3>
<h4>Bits de informação</h4>

$$0 \qquad 1$$

</center>

::: {.fragment .fade-in}

<center>
<h3>Computação Quântica</h3>
<h4>Qubits de informação</h4>

$$\ket{0} \qquad \ket{1}$$

</center>

:::

## {transition="fade"}

<center>
<h3>Computação Clássica</h3>
<h4>Bits de informação</h4>

$$0 \qquad 1$$

</center>

<center>
<h3>Computação Quântica</h3>
<h4>Qubits de informação</h4>

$$\alpha\ket{0} + \beta\ket{1}$$

::: {.fragment .fade-in}

Base computacional padrão

:::

</center>

## {transition="fade"}

<center>
<h3>Notação de Dirac</h3>
</center>

$$\ket{x} \text{ se lê ket x}$$
$$\bra{x} \text{ se lê bra x}$$
$$\braket{x}{y} \text{ se lê bra x ket y}$$


## {transition="fade"}

$$\ket{0} = \begin{bmatrix}1\\0\end{bmatrix}\qquad\ket{1} = \begin{bmatrix}0\\1\end{bmatrix}$$

::: {.fragment .fade-in}

$$\ket{\psi} = \begin{bmatrix}\alpha\\\beta\end{bmatrix} \class{invisible-text}{= \alpha\begin{bmatrix}1\\0\end{bmatrix} + \beta\begin{bmatrix}0\\1\end{bmatrix}}$$

:::

## {transition="fade"}

$$\ket{0} = \begin{bmatrix}1\\0\end{bmatrix}\qquad\ket{1} = \begin{bmatrix}0\\1\end{bmatrix}$$

$$\ket{\psi} = \begin{bmatrix}\alpha\\\beta\end{bmatrix} = \alpha\begin{bmatrix}1\\0\end{bmatrix} + \beta\begin{bmatrix}0\\1\end{bmatrix}$$

## {transition="fade"}

$$\ket{0} = \begin{bmatrix}1\\0\end{bmatrix}\qquad\ket{1} = \begin{bmatrix}0\\1\end{bmatrix}$$

$$\ket{\psi} = \begin{bmatrix}\alpha\\\beta\end{bmatrix} = \alpha\ket{0} + \beta\ket{1}$$

::: {.fragment .fade-in}

$$\alpha, \beta \in \mathbb{C}$$
$$|\alpha|^2 + |\beta|^2 = 1$$

:::

## 

$$z = a + ib$$

::: {.fragment .fade-in}

$$|z| = \sqrt{a^2 + b^2} \in \mathbb{R}$$

:::

::: {.fragment .fade-in}

$$\bar{z} = a - ib$$

:::

::: {.fragment .fade-in}

$$\ket{\psi} = \begin{bmatrix}\alpha\\\beta\end{bmatrix}$$

$$\bra{\psi} = \begin{bmatrix}\bar{\alpha}&\bar{\beta}\end{bmatrix} = \ket{\psi}^{\dagger}$$

:::

##

$$\ket{\psi} = \begin{bmatrix}\alpha\\\beta\end{bmatrix}$$

$$P(\psi = x) = \begin{cases}|\alpha|^2,& \text{ se } x = 0\\|\beta|^2,& \text{ se } x = 1\end{cases}$$

##

$$\ket{\psi} = \begin{bmatrix}\alpha\\\beta\end{bmatrix}$$

$$P(\psi = x) = \begin{cases}|\alpha|^2,& \text{ se } x = 0\\1-|\alpha|^2,& \text{ se } x = 1\end{cases}$$

::: {.fragment .fade-in}

<center>
Regra de Born
</center>

:::

##

$$\class{invisible-text}{U}\begin{bmatrix}1\\0\end{bmatrix} \class{invisible-text}{=} \begin{bmatrix}\alpha\\\beta\end{bmatrix}$$

##

$$\mathbb{U}\begin{bmatrix}1\\0\end{bmatrix} = \begin{bmatrix}\alpha\\\beta\end{bmatrix}$$

::: {.fragment .fade-in}

$$\mathbb{U}\mathbb{U}^\dagger = \mathbb{I}$$

$$\mathbb{U}^\dagger\mathbb{U} = \mathbb{I}$$

:::

## 

$$\psi \sim Bernoulli(p)$$

$$\mathbb{U}\begin{bmatrix}1\\0\end{bmatrix} = \begin{bmatrix}\sqrt{1 - p}\\\sqrt{p}\end{bmatrix}$$

::: {.fragment .fade-in}

$$\begin{bmatrix}\alpha_1&\alpha_2\\\alpha_3&\alpha_4\end{bmatrix}\begin{bmatrix}1\\0\end{bmatrix} = \begin{bmatrix}\sqrt{1 - p}\\\sqrt{p}\end{bmatrix}$$

:::

## 

$$\psi \sim Bernoulli(p)$$

$$\mathbb{U}\begin{bmatrix}1\\0\end{bmatrix} = \begin{bmatrix}\sqrt{1 - p}\\\sqrt{p}\end{bmatrix}$$

$$\begin{bmatrix}\sqrt{1 - p}&\alpha_2\\\sqrt{p}&\alpha_4\end{bmatrix}\begin{bmatrix}1\\0\end{bmatrix} = \begin{bmatrix}\sqrt{1 - p}\\\sqrt{p}\end{bmatrix}$$

::: {.fragment .fade-in}

$$\mathbb{U}\mathbb{U}^\dagger = \mathbb{I}$$

$$\mathbb{U}^\dagger\mathbb{U} = \mathbb{I}$$

:::

## 

$$\psi \sim Bernoulli(p)$$

$$\mathbb{U}\begin{bmatrix}1\\0\end{bmatrix} = \begin{bmatrix}\sqrt{1 - p}\\\sqrt{p}\end{bmatrix}$$

$$\begin{bmatrix}\sqrt{1 - p}&-\sqrt{p}\\\sqrt{p}&\sqrt{1 - p}\end{bmatrix}\begin{bmatrix}1\\0\end{bmatrix} = \begin{bmatrix}\sqrt{1 - p}\\\sqrt{p}\end{bmatrix}$$


$$\mathbb{U}\mathbb{U}^\dagger = \mathbb{I}$$

$$\mathbb{U}^\dagger\mathbb{U} = \mathbb{I}$$

## 

$$\psi \sim Bernoulli(p)$$

$$\mathbb{U}\begin{bmatrix}1\\0\end{bmatrix} = \begin{bmatrix}\sqrt{1 - p}\\\sqrt{p}\end{bmatrix}$$

$$\begin{bmatrix}\sqrt{1 - p}&-\sqrt{p}\\\sqrt{p}&\sqrt{1 - p}\end{bmatrix}\begin{bmatrix}1\\0\end{bmatrix} = \begin{bmatrix}\sqrt{1 - p}\\\sqrt{p}\end{bmatrix}$$

$$R_Y(\theta) = \begin{bmatrix}\cos{\frac{\theta}{2}}&-\sin{\frac{\theta}{2}}\\\sin{\frac{\theta}{2}}&\cos{\frac{\theta}{2}}\end{bmatrix}$$

## 

$$\psi \sim Bernoulli(p)$$

$$\mathbb{U}\begin{bmatrix}1\\0\end{bmatrix} = \begin{bmatrix}\sqrt{1 - p}\\\sqrt{p}\end{bmatrix}$$

$$R_Y(2\arcsin(\sqrt{p}))\begin{bmatrix}1\\0\end{bmatrix} = \begin{bmatrix}\sqrt{1 - p}\\\sqrt{p}\end{bmatrix}$$

$$R_Y(\theta) = \begin{bmatrix}\cos{\frac{\theta}{2}}&-\sin{\frac{\theta}{2}}\\\sin{\frac{\theta}{2}}&\cos{\frac{\theta}{2}}\end{bmatrix}$$

## {auto-animate="true"}

```{.python}
from qiskit import QuantumCircuit
from qiskit.circuit.library import RYGate
import numpy as np
import matplotlib.pyplot as plt

# Simulation parameters
mu = 0.02             # Drift (expected return)
sigma = 0.1           # Volatility (random fluctuations)
num_steps = 50      # Time steps in the evolution
```

## {auto-animate="true"}

```{.python}
from qiskit import QuantumCircuit
from qiskit.circuit.library import RYGate
import numpy as np
import matplotlib.pyplot as plt

# Simulation parameters
mu = 0.02             # Drift (expected return)
sigma = 0.1           # Volatility (random fluctuations)
num_steps = 50      # Time steps in the evolution

def Bernoulli_gate(p):
    return RYGate(2*np.arcsin(np.sqrt(p))) 
```

## {auto-animate="true"}

```{.python}
from qiskit import QuantumCircuit
from qiskit.circuit.library import RYGate
import numpy as np
import matplotlib.pyplot as plt

# Simulation parameters
mu = 0.02             # Drift (expected return)
sigma = 0.1           # Volatility (random fluctuations)
num_steps = 50      # Time steps in the evolution

def Bernoulli_gate(p):
    return RYGate(2*np.arcsin(np.sqrt(p))) 

P = 0.5 # Bernoulli p
B_0 = 0
values = [B_0]
```

## {auto-animate="true"}

```{.python}
P = 0.5 # Bernoulli p
B_0 = 0
values = [B_0]

from qiskit_aer import AerSimulator

simulator = AerSimulator()
time_steps = np.linspace(0, 1, num_steps + 1)
```

## {auto-animate="true"}

```{.python}
P = 0.5 # Bernoulli p
B_0 = 0
values = [B_0]

time_steps = np.linspace(0, 1, num_steps + 1)

for t in time_steps[1:]:
    qc = QuantumCircuit(1)
    qc.append(Bernoulli_gate(P), [0])
    qc.measure_all()
```

## {auto-animate="true"}

```{.python}
P = 0.5 # Bernoulli p
B_0 = 0
values = [B_0]

time_steps = np.linspace(0, 1, num_steps + 1)

for t in time_steps[1:]:
    qc = QuantumCircuit(1)
    qc.append(Bernoulli_gate(P), [0])
    qc.measure_all()

    result = simulator.run(qc, shots=1).result()
    counts = result.get_counts(qc)
    total = sum(counts.values())
```

## {auto-animate="true"}

```{.python}
P = 0.5 # Bernoulli p
B_0 = 0
values = [B_0]

time_steps = np.linspace(0, 1, num_steps + 1)

for t in time_steps[1:]:
    qc = QuantumCircuit(1)
    qc.append(Bernoulli_gate(P), [0])
    qc.measure_all()

    result = simulator.run(qc, shots=1).result()
    counts = result.get_counts(qc)
    total = sum(counts.values())

    down = counts.get('0')
    up = counts.get('1')
```

## {auto-animate="true"}

```{.python}
P = 0.5 # Bernoulli p
B_0 = 0
values = [B_0]

time_steps = np.linspace(0, 1, num_steps + 1)

for t in time_steps[1:]:
    qc = QuantumCircuit(1)
    qc.append(Bernoulli_gate(P), [0])
    qc.measure_all()

    result = simulator.run(qc, shots=1).result()
    counts = result.get_counts(qc)
    total = sum(counts.values())

    down = counts.get('0')
    up = counts.get('1')

    delta_sign = bool(down)*-1 + bool(up)*1
    S_t = values[-1] + np.sqrt(t) * sigma * delta_sign
    values.append(S_t)
```

##

<center>
![](../images/bernoulli.png)
</center>

## {auto-animate="true"}

```{.python}
P = 0.5 # Bernoulli p
B_0 = 0
values = [B_0]

time_steps = np.linspace(0, 1, num_steps + 1)

for t in time_steps[1:]:
    qc = QuantumCircuit(1)
    qc.append(Bernoulli_gate(P), [0])
    qc.measure_all()

    result = simulator.run(qc, shots=1).result()
    counts = result.get_counts(qc)
    total = sum(counts.values())

    down = counts.get('0')
    up = counts.get('1')

    delta_sign = bool(down)*-1 + bool(up)*1
    S_t = values[-1] + np.sqrt(t) * sigma * delta_sign
    values.append(S_t)
```

## {auto-animate="true"}

```{.python}
num_shots = 1024      # Number of measurements
P = 0.5
SD = np.sqrt(P * (1 - P)/num_shots)

S_0 = 10.93
prices = [S_0]

time_steps = np.linspace(0, 1, num_steps + 1)

for t in time_steps[1:]:
    qc = QuantumCircuit(1)
    qc.append(Bernoulli_gate(P), [0])
    qc.measure_all()

    result = simulator.run(qc, shots=1).result()
    counts = result.get_counts(qc)
    total = sum(counts.values())

    down = counts.get('0')
    up = counts.get('1')
```

## {auto-animate="true"}

```{.python}
num_shots = 1024      # Number of measurements
P = 0.5
SD = np.sqrt(P * (1 - P)/num_shots)

S_0 = 10.93
prices = [S_0]

time_steps = np.linspace(0, 1, num_steps + 1)

for t in time_steps[1:]:
    qc = QuantumCircuit(1)
    qc.append(Bernoulli_gate(P), [0])
    qc.measure_all()

    result = simulator.run(qc, shots=1).result()
    counts = result.get_counts(qc)
    total = sum(counts.values())

    price_down = counts.get('0') / num_shots
    price_up = counts.get('1') / num_shots
```

## {auto-animate="true"}

```{.python}
num_shots = 1024      # Number of measurements
P = 0.5
SD = np.sqrt(P * (1 - P)/num_shots)

S_0 = 10.93
prices = [S_0]

time_steps = np.linspace(0, 1, num_steps + 1)

for t in time_steps[1:]:
    qc = QuantumCircuit(1)
    qc.append(Bernoulli_gate(P), [0])
    qc.measure_all()

    result = simulator.run(qc, shots=1).result()
    counts = result.get_counts(qc)
    total = sum(counts.values())

    price_down = counts.get('0') / num_shots
    price_up = counts.get('1') / num_shots

    random_norm = (price_up - P)/SD
```

## {auto-animate="true"}

```{.python}
num_shots = 1024      # Number of measurements
P = 0.5
SD = np.sqrt(P * (1 - P)/num_shots)

S_0 = 10.93
prices = [S_0]

time_steps = np.linspace(0, 1, num_steps + 1)

for t in time_steps[1:]:
    qc = QuantumCircuit(1)
    qc.append(Bernoulli_gate(P), [0])
    qc.measure_all()

    result = simulator.run(qc, shots=1).result()
    counts = result.get_counts(qc)
    total = sum(counts.values())

    price_down = counts.get('0') / num_shots
    price_up = counts.get('1') / num_shots

    random_norm = (price_up - P)/SD
    
    S_t = S_0 * np.exp((mu - sigma**2/2) * t + np.sqrt(t) * sigma * random_norm)
    prices.append(S_t)
```

##

<center>
![](../images/normal.png)
</center>

##

### References

::: {#refs}

:::